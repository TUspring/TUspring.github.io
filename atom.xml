<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tuspring的博客</title>
  <icon>https://www.gravatar.com/avatar/388ac37e32efff72ac8f99c3bc96eda2</icon>
  <subtitle>您好，世界！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//tuspring.com/"/>
  <updated>2018-04-27T17:00:41.193Z</updated>
  <id>//tuspring.com/</id>
  
  <author>
    <name>Tuspring</name>
    <email>tuspring6@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2.0无限滚动加载数据插件</title>
    <link href="//tuspring.com/2018/04/20/vue-infinite-loading-plugin/"/>
    <id>//tuspring.com/2018/04/20/vue-infinite-loading-plugin/</id>
    <published>2018-04-20T15:15:00.000Z</published>
    <updated>2018-04-27T17:00:41.193Z</updated>
    
    <content type="html"><![CDATA[<p>最新做vue项目用到下拉滚动加载数据功能，由于选的UI库（element）没有这个组件，就用Vue-infinite-loading 这个插件代替，使用中遇到的一些问题及使用方法，总结作记录！</p><blockquote><p>安装：npm install vue-infinite-loading –save</p></blockquote><a id="more"></a><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><blockquote><p>ES6<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> InfiniteLoading <span class="keyword">from</span> <span class="string">'vue-infinite-loading'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    InfiniteLoading,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>CommonJS<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> InfiniteLoading = <span class="built_in">require</span>(<span class="string">'vue-infinite-loading'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    InfiniteLoading,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="1-用法一（基本用法）"><a href="#1-用法一（基本用法）" class="headerlink" title="1.用法一（基本用法）"></a>1.用法一（基本用法）</h3><blockquote><p>Template<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></span><br><span class="line">    Line:</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--infinite-loading这个组件要放在列表的底部，滚动的盒子里面！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infinite-loading</span> @<span class="attr">infinite</span>=<span class="string">"infiniteHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">infinite-loading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Script<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> InfiniteLoading <span class="keyword">from</span> <span class="string">'vue-infinite-loading'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    infiniteHandler($state) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.list.length + <span class="number">1</span>; i &lt;= <span class="keyword">this</span>.list.length + <span class="number">20</span>; i++) &#123;</span><br><span class="line">          temp.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.concat(temp);</span><br><span class="line">        $state.loaded();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    InfiniteLoading,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="2-用法二（一般的分页数据）"><a href="#2-用法二（一般的分页数据）" class="headerlink" title="2.用法二（一般的分页数据）"></a>2.用法二（一般的分页数据）</h3><blockquote><p>Template<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hacker-news-list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hacker-news-item"</span> <span class="attr">v-for</span>=<span class="string">"(item, key) in list"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infinite-loading</span> @<span class="attr">infinite</span>=<span class="string">"infiniteHandler"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"no-more"</span>&gt;</span></span><br><span class="line">      There is no more Hacker News</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">infinite-loading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Script<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> InfiniteLoading from <span class="string">'vue-infinite-loading'</span>;</span><br><span class="line"><span class="keyword">import</span> axios from <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">data</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    infiniteHandler($state) &#123;</span><br><span class="line">     const api=<span class="string">"http://xxxx.com/xxx"</span></span><br><span class="line">      axios.<span class="keyword">get</span>(api, &#123;   <span class="comment">//api为你请求数据地址</span></span><br><span class="line">        params: &#123;</span><br><span class="line">          page: <span class="keyword">this</span>.list.length / <span class="number">10</span> + <span class="number">1</span>,   <span class="comment">//页码参数（10条每页）</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;).then((response) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="keyword">data</span>.length) &#123;</span><br><span class="line">          <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.concat(response.<span class="keyword">data</span>);  <span class="comment">//response.data为你请求接口返回的数组列表</span></span><br><span class="line">          $state.loaded();</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.list.length / <span class="number">10</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            $state.complete(); <span class="comment">//这里是加载了10页数据，设置不在加载</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $state.complete();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    InfiniteLoading,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>$state:  该组件会传递一个特殊的事件参数$state给事件处理器来改变加载状态，<br>$state参数包括三个方法，它们是loaded方法，complete方法和reset方法。</p></blockquote><ul><li>loaded方法用于在每次加载数据后停止播放动画，然后该组件将准备好进行下一次触发。</li><li>complete方法用于完成完整的无限加载，则该组件将不再处理任何滚动操作。如果在loaded调用complete方法时永远不会调用该方法，则此组件将显示用户的否结果消息，如果不是，则将显示不再有用户消息，并且可以按slot设其它内容</li><li>reset方法是将组件返回到原来的状态</li></ul><h3 id="3-用法三"><a href="#3-用法三" class="headerlink" title="3.用法三"></a>3.用法三</h3><blockquote><p>一般的无限滚动下拉加载数据会带有筛选条件。比如根据不同条件选择出来的列表，或者改变某个状态重新渲染列表就要用这个用法了</p></blockquote><blockquote><p>Template<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hacker-news-list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hacker-news-header"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--下拉改变--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"tag"</span> @<span class="attr">change</span>=<span class="string">"changeFilter()"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"story"</span>&gt;</span>Story<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--或者点击改变--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeFilter()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"hacker-news-item"</span> <span class="attr">v-for</span>=<span class="string">"(item, key) in list"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infinite-loading</span> @<span class="attr">infinite</span>=<span class="string">"infiniteHandler"</span> <span class="attr">ref</span>=<span class="string">"infiniteLoading"</span>&gt;</span>  <span class="comment">&lt;!--不要忘记设置这个 ref="infiniteLoading"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"no-more"</span>&gt;</span></span><br><span class="line">      There is no more Hacker News</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">infinite-loading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Script<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> InfiniteLoading from <span class="string">'vue-infinite-loading'</span>;</span><br><span class="line"><span class="keyword">import</span> axios from <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">data</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      tag: <span class="string">'story'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    infiniteHandler($state) &#123;</span><br><span class="line">      const api=<span class="string">"http://xxxx.com/xxx"</span></span><br><span class="line">      axios.<span class="keyword">get</span>(api, &#123;   <span class="comment">//api为你请求数据地址</span></span><br><span class="line">        params: &#123;</span><br><span class="line">          tags: <span class="keyword">this</span>.tag,  <span class="comment">//改变的条件参数</span></span><br><span class="line">          page: <span class="keyword">this</span>.list.length / <span class="number">10</span> + <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;).then((&#123; <span class="keyword">data</span> &#125;) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">data</span>.hits.length) &#123;</span><br><span class="line">          <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.concat(<span class="keyword">data</span>.hits);</span><br><span class="line">          $state.loaded();</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.list.length / <span class="number">20</span> === <span class="number">10</span>) &#123;</span><br><span class="line">            $state.complete();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $state.complete();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变条件条用此方法</span></span><br><span class="line">    changeFilter() &#123;</span><br><span class="line">      <span class="keyword">this</span>.list = [];</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(() =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs.infiniteLoading.$emit(<span class="string">'$InfiniteLoading:reset'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    InfiniteLoading,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="4-其他用法（特殊条件手动触发）"><a href="#4-其他用法（特殊条件手动触发）" class="headerlink" title="4.其他用法（特殊条件手动触发）"></a>4.其他用法（特殊条件手动触发）</h3><blockquote><p>在大多数情况下，我们希望立即为空列表加载数据，这也是该组件的默认行为。如果你只想控制第一次加载，你可以简单地使用v-if和v-else指令来实现它,但是如果，在一些复杂的情况下，我们需要手动每三页加载一次数据，我们可以使用该方法，</p></blockquote><blockquote><p>这里我不做详细介绍。有这个需求的可以去看看官方文档：<a href="https://github.com/PeachScript/vue-infinite-loading" target="_blank" rel="noopener">vue-infinite-loading</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最新做vue项目用到下拉滚动加载数据功能，由于选的UI库（element）没有这个组件，就用Vue-infinite-loading 这个插件代替，使用中遇到的一些问题及使用方法，总结作记录！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装：npm install vue-infinite-loading –save&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="无限滚动" scheme="//tuspring.com/tags/%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8/"/>
    
      <category term="下拉加载" scheme="//tuspring.com/tags/%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>浅谈前端面试那些事</title>
    <link href="//tuspring.com/2018/03/30/web-an-oral-quiz/"/>
    <id>//tuspring.com/2018/03/30/web-an-oral-quiz/</id>
    <published>2018-03-30T15:40:00.000Z</published>
    <updated>2018-04-04T17:35:37.756Z</updated>
    
    <content type="html"><![CDATA[<h6 id="知识点汇总"><a href="#知识点汇总" class="headerlink" title="知识点汇总"></a>知识点汇总</h6><blockquote><p>1.HTML</p></blockquote><ul><li>HTML5新特性，语义化</li><li>浏览器的标准模式和怪异模式</li><li>xhtml和html的区别</li><li>使用data-的好处</li><li>meta标签</li><li>canvas</li><li>HTML废弃的标签</li><li>IE6 bug，和一些定位写法</li><li>css js放置位置和原因</li><li>什么是渐进式渲染</li><li>html模板语言</li><li>meta viewport原理</li></ul><a id="more"></a><blockquote><p>2.CSS</p></blockquote><ul><li>盒模型，box-sizing</li><li>CSS3新特性，伪类，伪元素，锚伪类</li><li>CSS实现隐藏页面的方式</li><li>如何实现水平居中和垂直居中。</li><li>说说position，display</li><li>请解释*{box-sizing:border-box;}的作用，并说明使用它的好处</li><li>浮动元素引起的问题和解决办法？绝对定位和相对定位，元素浮动后的display值</li><li>link和@import引入css的区别</li><li>解释一下css3的flexbox，以及适用场景</li><li>inline和inline-block的区别</li><li>哪些是块级元素那些是行级元素，各有什么特点</li><li>grid布局</li><li>table布局的作用</li><li>实现两栏布局有哪些方法？</li><li>css dpi</li><li>你知道attribute和property的区别么</li><li>css布局问题？css实现三列布局怎么做？如果中间是自适应又怎么做？</li><li>流式布局如何实现，响应式布局如何实现</li><li>移动端布局方案</li><li>实现三栏布局（圣杯布局，双飞翼布局，flex布局）</li><li>清除浮动的原理</li><li>overflow:hidden有什么缺点？</li><li>padding百分比是相对于父级宽度还是自身的宽度</li><li>css3动画，transition和animation的区别，animation的属性，加速度，重力的模拟实现</li><li>CSS 3 如何实现旋转图片（transform: rotate）</li><li>sass less</li><li>对移动端开发了解多少？（响应式设计、Zepto；@media、viewport、JavaScript 正则表达式判断平台。）</li><li>什么是bfc，如何创建bfc？解决什么问题？</li><li>CSS中的长度单位（px,pt,rem,em,ex,vw,vh,vh,vmin,vmax）</li><li>CSS 选择器的优先级是怎样的？</li><li>雪碧图</li><li>svg</li><li>媒体查询的原理是什么？</li><li>CSS 的加载是异步的吗？表现在什么地方？</li><li>常遇到的浏览器兼容性问题有哪些？常用的hack的技巧</li><li>外边距合并</li><li>解释一下“::before”和“:after”中的双冒号和单冒号的区别</li></ul><blockquote><p>3.JS</p></blockquote><ul><li>js的基本类型有哪些？引用类型有哪些？null和undefined的区别。</li><li>如何判断一个变量是Array类型？如何判断一个变量是Number类型？（都不止一种）</li><li>Object是引用类型嘛？引用类型和基本类型有什么区别？哪个是存在堆哪一个是存在栈上面的？</li><li>JS常见的dom操作api</li><li>解释一下事件冒泡和事件捕获</li><li>事件委托（手写例子），事件冒泡和捕获，如何阻止冒泡？如何组织默认事件？</li><li>对闭包的理解？什么时候构成闭包？闭包的实现方法？闭包的优缺点？</li><li>this有哪些使用场景？跟C,Java中的this有什么区别？如何改变this的值？</li><li>call，apply，bind</li><li>显示原型和隐式原型，手绘原型链，原型链是什么？为什么要有原型链</li><li>创建对象的多种方式</li><li>实现继承的多种方式和优缺点</li><li>new 一个对象具体做了什么</li><li>手写Ajax，XMLHttpRequest</li><li>变量提升</li><li>举例说明一个匿名函数的典型用例</li><li>指出JS的宿主对象和原生对象的区别，为什么扩展JS内置对象不是好的做法？有哪些内置对象和内置函数？</li><li>attribute和property的区别</li><li>document load和document DOMContentLoaded两个事件的区别</li><li>=== 和 == , [] === [], undefined === undefined,[] == [], undefined == undefined</li><li>typeof能够得到哪些值</li><li>什么是“use strict”,好处和坏处</li><li>函数的作用域是什么？js 的作用域有几种？</li><li>JS如何实现重载和多态</li><li>常用的数组api，字符串api</li><li>原生事件绑定（跨浏览器），dom0和dom2的区别？</li><li>给定一个元素获取它相对于视图窗口的坐标</li><li>如何实现图片滚动懒加载</li><li>js 的字符串类型有哪些方法？ 正则表达式的函数怎么使用？</li><li>深拷贝</li><li>编写一个通用的事件监听函数</li><li>web端cookie的设置和获取</li><li>setTimeout和promise的执行顺序</li><li>JavaScript 的事件流模型都有什么？</li><li>navigator对象，location和history</li><li>js的垃圾回收机制</li><li>内存泄漏的原因和场景</li><li>DOM事件的绑定的几种方式</li><li>DOM事件中target和currentTarget的区别</li><li>typeof 和 instanceof 区别，instanceof原理</li><li>js动画和css3动画比较</li><li>JavaScript 倒计时（setTimeout）</li><li>js处理异常</li><li>js的设计模式知道那些</li><li>轮播图的实现，以及轮播图组件开发，轮播10000张图片过程</li><li>websocket的工作原理和机制。</li><li>手指点击可以触控的屏幕时，是什么事件？</li><li>什么是函数柯里化？以及说一下JS的API有哪些应用到了函数柯里化的实现？(函数柯里化一些了解，以及在函数式编程的应用，最后说了一下JS中bind函数和数组的reduce方法用到了函数柯里化。)</li><li>JS代码调试</li></ul><blockquote><p>4.ES6</p></blockquote><ul><li>谈一谈 promise</li><li>所有的 ES6 特性你都知道吗？如果遇到一个东西不知道是 ES6 还是 ES5, 你该怎么区分它</li><li>es6的继承和es5的继承有什么区别</li><li>promise封装ajax</li><li>let const的优点</li><li>es6 generator 是什么，async/await 实现原理</li><li>ES6和node的commonjs模块化规范区别</li><li>箭头函数，以及它的this</li></ul><blockquote><p>5.计算机网络</p></blockquote><ul><li>HTTP协议头含有哪些重要的部分，HTTP状态码</li><li>网络url输入到输出怎么做？</li><li>性能优化为什么要减少 HTTP 访问次数？</li><li>Http请求的过程与原理</li><li>https（对是https）有几次握手和挥手？https的原理。</li><li>http有几次挥手和握手？TLS的中文名？TLS在哪一网络层？</li><li>TCP连接的特点，TCP连接如何保证安全可靠的？</li><li>为什么TCP连接需要三次握手，两次不可以吗，为什么</li><li>为什么tcp要三次握手四次挥手？</li><li>tcp的三次握手和四次挥手画图（当场画写ack 和 seq的值）？</li><li>tcp与udp的区别</li><li>get和post的区别？什么情况下用到？</li><li>http2 与http1 的区别？</li><li>websocket</li><li>什么是tcp流，什么是http流</li><li>babel是如何将es6代码编译成es5的</li><li>http2的持久连接和管线化</li><li>域名解析时是tcp还是udp</li><li>域名发散和域名收敛</li><li>Post一个file的时候file放在哪的？</li><li>HTTP Response的Header里面都有些啥？</li></ul><blockquote><p>6.浏览器相关</p></blockquote><ul><li>跨域，为什么JS会对跨域做出限制</li><li>前端安全：xss，csrf…</li><li>浏览器怎么加载页面的？script脚本阻塞有什么解决方法？defer和async的区别？</li><li>浏览器强缓存和协商缓存</li><li>浏览器的全局变量有哪些</li><li>浏览器同一时间能够从一个域名下载多少资源</li><li>按需加载，不同页面的元素判断标准</li><li>web存储、cookies、localstroge等的使用和区别</li><li>浏览器的内核</li><li>如何实现缓存机制？（从200缓存，到cache到etag再到）</li><li>说一下200和304的理解和区别</li><li>什么是预加载、懒加载</li><li>一个 XMLHttpRequest 实例有多少种状态？</li><li>dns解析原理，输入网址后如何查找服务器</li><li>服务器如何知道你？</li><li>浏览器渲染过程</li><li>ie的某些兼容性问题</li><li>session</li><li>拖拽实现</li><li>拆解url的各部分</li></ul><blockquote><p>7.工程化</p></blockquote><ul><li>对webpack,gulp，grunt等有没有了解?对比。</li><li>webpack的入口文件怎么配置，多个入口怎么分割。</li><li>webpack的loader和plugins的区别</li><li>gulp的具体使用。</li><li>前端工程化的理解、如何自己实现一个文件打包，比如一个JS文件里同时又ES5 和ES6写的代码，如何编译兼容他们</li></ul><blockquote><p>8.模块化</p></blockquote><ul><li>对AMD,CMD,CommonJS有没有了解?</li><li>为什么要模块化？不用的时候和用RequireJs的时候代码大概怎么写？</li><li>说说有哪些模块化的库，有了解过模块化的发展的历史吗？</li><li>分别说说同步和异步模块化的应用场景，说下AMD异步模块化实现的原理？</li><li>如何将项目里面的所有的require的模块语法换成import的ES6的语法？</li><li>使用模块化加载时，模块加载的顺序是怎样的，如果不知道，根据已有的知识，你觉得顺序应该是怎么样的？</li></ul><blockquote><p>9.框架</p></blockquote><ul><li>使用过哪些框架？</li><li>zepto 和 jquery 是什么关系，有什么联系么？</li><li>jquery源码如何实现选择器的，为什么$取得的对象要设计成数组的形式，这样设计的目的是什么</li><li>jquery如何绑定事件，有几种类型和区别</li><li>什么是MVVM，MVC，MVP</li><li>Vue和Angular的双向数据绑定原理</li><li>Vue，Angular组件间通信以及路由原理</li><li>react和vue的生命周期</li><li>react和vue的虚拟dom以及diff算法</li><li>vue的observer，watcher，compile</li><li>react和angular分别用在什么样的业务吗？性能方面和MVC层面上的区别</li><li>jQuery对象和JS的Element有什么区别</li><li>jQuery对象是怎么实现的</li><li>jQuery除了它封装了一些方法外，还有什么值得我们去学习和使用的？</li><li>jQuery的$(‘xxx’)做了什么事情</li><li>介绍一下bootstrap的栅格系统是如何实现的</li></ul><blockquote><p>10.Nodejs</p></blockquote><ul><li>对nodejs有没有了解</li><li>Express 和 koa 有什么关系，有什么区别？</li><li>nodejs适合做什么样的业务？</li><li>nodejs与php，java有什么区别</li><li>Nodejs中的Stream和Buffer有什么区别？</li><li>node的异步问题是如何解决的？</li><li>node是如何实现高并发的？</li><li>说一下 Nodejs 的 event loop 的原理</li></ul><blockquote><p>11.数据结构</p></blockquote><ul><li>基本数据结构：（数组、队列、链表、堆、二叉树、哈希表等等）</li><li>8种排序算法，原理，以及适用场景和复杂度</li><li>说出越多越好的费波拉切数列的实现方法？</li></ul><blockquote><p>12.性能优化</p></blockquote><ul><li>cdn的用法是什么？什么时候用到？</li><li>浏览器的页面优化？</li><li>如何优化 DOM 操作的性能</li><li>单页面应用有什么SEO方案？</li><li>单页面应用首屏显示比较慢，原因是什么？有什么解决方案？</li></ul><blockquote><p>13.其他</p></blockquote><ul><li>正则表达式</li><li>前端渲染和后端渲染的优缺点</li><li>数据库的四大特性，什么是原子性，表的关系</li><li>你觉得前端体系应该是怎样的？</li><li>一个静态资源要上线，里面有各种资源依赖，你如何平稳上线</li><li>如果要你去实现一个前端模板引擎，你会怎么做</li><li>知道流媒体查询吗？</li><li>SEO</li><li>mysql 和 mongoDB 有什么区别？</li><li>restful的method解释</li><li>数据库知识、操作系统知识</li><li>click在ios上有300ms延迟，原因及如何解决</li><li>移动端的适配，rem+媒体查询/meta头设置</li><li>移动端的手势和事件；</li><li>unicode，utf8，gbk编码的了解，乱码的解决</li></ul><blockquote><p>14.开放性问题</p></blockquote><ul><li>你都看过什么书？最近在看什么书？</li><li>用过什么框架？有没有看过什么框架的代码？</li><li>有没有学过设计模式？</li><li>说一说观察者模式吧！能不能写出来？</li><li>你最大的优点是什么？那你最大的缺点呢？</li><li>你除了写博客还有什么输出？</li><li>现在你的领导给你了一份工作，要求你一个星期完成，但你看了需求以后估计需要3周才能完成，你该怎么办？</li><li>平时关注的前端技术</li><li>如何规划自己的职业生涯</li><li>项目过程中，有遇到什么问题吗？怎么解决的？</li><li>最近在研究哪方面的东西？</li><li>请介绍一项你最热爱、最擅长的专业领域，并且介绍的学习规划。</li><li>请介绍你参与的印象最深刻的一个项目，为什么？并且介绍你在项目中的角色和发挥的作用。</li></ul><blockquote><p>15.HR面</p></blockquote><ul><li>你为什么要学习前端？</li><li>你平时的是怎么学习前端的？有什么输出？</li><li>你觉得自己最好的项目是什么？</li><li>身边比较佩服的人有什么值得你学习的？你为什么没有跟他们一样？</li><li>同事的什么问题会让你接受不了</li><li>压力最大的事情是什么？</li><li>身边的朋友通常对你的评价是什么</li><li>喜欢什么样的工作氛围</li><li>如何看待加班</li><li>有没有对象</li><li>意向城市</li><li>其他的offer</li><li>为什么要录取你？</li><li>周末都会干什么？</li><li>未来职业规划</li></ul><p>   转自:<a href="https://segmentfault.com/a/1190000013857582" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013857582</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;知识点汇总&quot;&gt;&lt;a href=&quot;#知识点汇总&quot; class=&quot;headerlink&quot; title=&quot;知识点汇总&quot;&gt;&lt;/a&gt;知识点汇总&lt;/h6&gt;&lt;blockquote&gt;
&lt;p&gt;1.HTML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HTML5新特性，语义化&lt;/li&gt;
&lt;li&gt;浏览器的标准模式和怪异模式&lt;/li&gt;
&lt;li&gt;xhtml和html的区别&lt;/li&gt;
&lt;li&gt;使用data-的好处&lt;/li&gt;
&lt;li&gt;meta标签&lt;/li&gt;
&lt;li&gt;canvas&lt;/li&gt;
&lt;li&gt;HTML废弃的标签&lt;/li&gt;
&lt;li&gt;IE6 bug，和一些定位写法&lt;/li&gt;
&lt;li&gt;css js放置位置和原因&lt;/li&gt;
&lt;li&gt;什么是渐进式渲染&lt;/li&gt;
&lt;li&gt;html模板语言&lt;/li&gt;
&lt;li&gt;meta viewport原理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="//tuspring.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="web" scheme="//tuspring.com/tags/web/"/>
    
      <category term="面试" scheme="//tuspring.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0+组件库集合</title>
    <link href="//tuspring.com/2018/02/12/vue-plugin/"/>
    <id>//tuspring.com/2018/02/12/vue-plugin/</id>
    <published>2018-02-11T17:20:00.000Z</published>
    <updated>2018-04-22T16:42:09.495Z</updated>
    
    <content type="html"><![CDATA[<h6 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h6><ul><li><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element</a> - 饿了么出品的Vue2的web UI工具套件</li><li><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Vux</a> - 基于Vue和WeUI的组件库</li><li><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">mint-ui</a> - Vue 2的移动UI元素</li><li><a href="https://www.iviewui.com/" target="_blank" rel="noopener">iview</a> - 基于 Vuejs 的开源 UI 组件库</li><li><a href="https://github.com/JosephusPaye/Keen-UI" target="_blank" rel="noopener">Keen-UI</a> - 轻量级的基本UI组件合集</li><li><a href="https://github.com/vuematerial/vue-material" target="_blank" rel="noopener">vue-material</a> - 通过Vue Material和Vue 2建立精美的app应用</li><li><a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a> - 三端样式一致的响应式 UI 库</li></ul><a id="more"></a><ul><li><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify</a> - 为移动而生的Vue JS 2组件框架</li><li><a href="https://github.com/wangdahoo/vonic" target="_blank" rel="noopener">vonic</a> - 快速构建移动端单页应用</li><li><a href="https://github.com/egoist/eme" target="_blank" rel="noopener">eme</a> - 优雅的Markdown编辑器</li><li><a href="https://github.com/shentao/vue-multiselect" target="_blank" rel="noopener">vue-multiselect</a> - Vue.js选择框解决方案</li><li><a href="https://github.com/ratiw/vue-table" target="_blank" rel="noopener">vue-table</a> - 简化数据表格</li><li><a href="https://github.com/OYsun/VueCircleMenu" target="_blank" rel="noopener">VueCircleMenu</a> - 漂亮的vue圆环菜单</li><li><a href="https://github.com/Coffcer/vue-chat" target="_blank" rel="noopener">vue-chat</a> - vuejs和vuex及webpack的聊天示例</li><li><a href="https://github.com/luojilab/radon-ui" target="_blank" rel="noopener">radon-ui</a> - 快速开发产品的Vue组件库</li><li><a href="https://github.com/MopTym/vue-waterfall" target="_blank" rel="noopener">vue-waterfall</a> - Vue.js的瀑布布局组件</li><li><a href="https://github.com/myronliu347/vue-carbon" target="_blank" rel="noopener">vue-carbon</a> - 基于 vue 开发MD风格的移动端</li><li><a href="https://github.com/FE-Driver/vue-beauty" target="_blank" rel="noopener">vue-beauty</a> - 由vue和ant design创建的优美UI组件</li><li><a href="https://github.com/chenz24/vue-blu" target="_blank" rel="noopener">vue-blu</a> - 帮助你轻松创建web应用</li><li><a href="https://github.com/taylorchen709/vue-admin" target="_blank" rel="noopener">vueAdmin</a> - 基于vuejs2和element的简单的管理员模板</li><li><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">vue-syntax-highlight</a> - Sublime Text语法高亮</li><li><a href="https://github.com/ElemeFE/vue-infinite-scroll" target="_blank" rel="noopener">vue-infinite-scroll</a> - VueJS的无限滚动指令</li><li><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="noopener">Vue.Draggable</a> - 实现拖放和视图模型数组同步</li><li><a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">vue-awesome-swiper</a> - vue.js触摸滑动组件</li><li><a href="https://github.com/jinzhe/vue-calendar" target="_blank" rel="noopener">vue-calendar</a> - 日期选择插件</li><li><a href="https://github.com/bootstrap-vue/bootstrap-vue" target="_blank" rel="noopener">bootstrap-vue</a> - 应用于Vuejs2的Twitter的Bootstrap 4组件</li><li><a href="https://github.com/ElemeFE/vue-swipe" target="_blank" rel="noopener">vue-swipe</a> - VueJS触摸滑块</li><li><a href="https://github.com/ElemeFE/vue-amap" target="_blank" rel="noopener">vue-amap</a> - 基于Vue 2和高德地图的地图组件</li><li><a href="https://github.com/apertureless/vue-chartjs" target="_blank" rel="noopener">vue-chartjs</a> - vue中的Chartjs的封装</li><li><a href="https://github.com/hilongjw/vue-datepicker" target="_blank" rel="noopener">vue-datepicker</a> - 日历和日期选择组件</li><li><a href="https://github.com/jrainlau/markcook" target="_blank" rel="noopener">markcook</a> - 好看的markdown编辑器</li><li><a href="https://github.com/GuillaumeLeclerc/vue-google-maps" target="_blank" rel="noopener">vue-google-maps</a> - 带有双向数据绑定Google地图组件</li><li><a href="https://github.com/hilongjw/vue-progressbar" target="_blank" rel="noopener">vue-progressbar</a> - vue轻量级进度条</li><li><a href="https://github.com/alessiomaffeis/vue-picture-input" target="_blank" rel="noopener">vue-picture-input</a> - 移动友好的图片文件输入组件</li><li><a href="https://github.com/PeachScript/vue-infinite-loading" target="_blank" rel="noopener">vue-infinite-loading</a> - VueJS的无限滚动插件</li><li><a href="https://github.com/lian-yue/vue-upload-component" target="_blank" rel="noopener">vue-upload-component</a> - Vuejs文件上传组件</li><li><a href="https://github.com/Haixing-Hu/vue-datetime-picker" target="_blank" rel="noopener">vue-datetime-picker</a> - 日期时间选择控件</li><li><a href="https://github.com/wangdahoo/vue-scroller" target="_blank" rel="noopener">vue-scroller</a> - Vonic UI的功能性组件</li><li><a href="https://github.com/icai/vue2-calendar" target="_blank" rel="noopener">vue2-calendar</a> - 支持lunar和日期事件的日期选择器</li><li><a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="noopener">vue-video-player</a> - VueJS视频及直播播放器</li><li><a href="https://github.com/Wanderxx/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a> - 基于vue.js的全日历组件</li><li><a href="https://github.com/ccforward/rubik" target="_blank" rel="noopener">rubik</a> - 基于Vuejs2的开源 UI 组件库</li><li><a href="https://github.com/OYsun/VueStar" target="_blank" rel="noopener">VueStar</a> - 带星星动画的vue点赞按钮</li><li><a href="https://github.com/egoist/vue-mugen-scroll" target="_blank" rel="noopener">vue-mugen-scroll</a> - 无限滚动组件</li><li><a href="https://github.com/mint-ui/mint-loadmore" target="_blank" rel="noopener">mint-loadmore</a> - VueJS的双向下拉刷新组件</li><li><a href="https://github.com/matfish2/vue-tables-2" target="_blank" rel="noopener">vue-tables-2</a> - 显示数据的bootstrap样式网格</li><li><a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noopener">vue-virtual-scroller</a> - 带任意数目数据的顺畅的滚动</li><li><a href="https://github.com/SimonZhangITer/DataVisualization" target="_blank" rel="noopener">DataVisualization</a> - 数据可视化</li><li><a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">vue-quill-editor</a> - 基于Quill适用于Vue2的富文本编辑器</li><li><a href="https://github.com/hifarer/Vueditor" target="_blank" rel="noopener">Vueditor</a> - 所见即所得的编辑器</li><li><a href="https://github.com/PeakTai/vue-html5-editor" target="_blank" rel="noopener">vue-html5-editor</a> - html5所见即所得编辑器</li><li><a href="https://github.com/ElemeFE/vue-msgbox" target="_blank" rel="noopener">vue-msgbox</a> - vuejs的消息框</li><li><a href="https://github.com/warpcgd/vue-concise-slider" target="_blank" rel="noopener">vue-slider</a> - vue 滑动组件</li><li><a href="https://github.com/Vanthink-UED/vue-core-image-upload" target="_blank" rel="noopener">vue-core-image-upload</a> - 轻量级的vue上传插件</li><li><a href="https://github.com/hilongjw/vue-slide" target="_blank" rel="noopener">vue-slide</a> - vue轻量级滑动组件</li><li><a href="https://github.com/JALBAA/vue-lazyload-img" target="_blank" rel="noopener">vue-lazyload-img</a> - 移动优化的vue图片懒加载插件</li><li><a href="https://github.com/hejianxian/vue-drag-and-drop-list" target="_blank" rel="noopener">vue-drag-and-drop-list</a> - 创建排序列表的Vue指令</li><li><a href="https://github.com/MatteoGabriele/vue-progressive-image" target="_blank" rel="noopener">vue-progressive-image</a> - Vue的渐进图像加载插件</li><li><a href="https://github.com/vuwe/vuwe" target="_blank" rel="noopener">vuwe</a> - 基于微信WeUI所开发的专用于Vue2的组件库</li><li><a href="https://github.com/rowanwins/vue-dropzone" target="_blank" rel="noopener">vue-dropzone</a> - 用于文件上传的Vue组件</li><li><a href="https://github.com/hchstera/vue-charts" target="_blank" rel="noopener">vue-charts</a> - 轻松渲染一个图表</li><li><a href="https://github.com/weilao/vue-swiper" target="_blank" rel="noopener">vue-swiper</a> - 易于使用的滑块组件</li><li><a href="https://github.com/littlewin-wang/vue-images" target="_blank" rel="noopener">vue-images</a> - 显示一组图片的lightbox组件</li><li><a href="https://github.com/Wlada/vue-carousel-3d" target="_blank" rel="noopener">vue-carousel-3d</a> - VueJS的3D轮播组件</li><li><a href="https://github.com/QingWei-Li/vue-region-picker" target="_blank" rel="noopener">vue-region-picker</a> - 选择中国的省份市和地区</li><li><a href="https://github.com/cngu/vue-typer" target="_blank" rel="noopener">vue-typer</a> - 模拟用户输入选择和删除文本的Vue组件</li><li><a href="https://github.com/NewDadaFE/vue-impression" target="_blank" rel="noopener">vue-impression</a> - 移动Vuejs2 UI元素</li><li><a href="https://github.com/galenyuan/vue-datatable" target="_blank" rel="noopener">vue-datatable</a> - 使用Vuejs创建的DataTableView</li><li><a href="https://github.com/santiblanko/vue-instant" target="_blank" rel="noopener">vue-instant</a> - 轻松创建自动提示的自定义搜索控件</li><li><a href="https://github.com/hilongjw/vue-dragging" target="_blank" rel="noopener">vue-dragging</a> - 使元素可以拖拽</li><li><a href="https://github.com/NightCatSama/vue-slider-component" target="_blank" rel="noopener">vue-slider-component</a> - 在vue1和vue2中使用滑块</li><li><a href="https://github.com/BosNaufal/vue2-loading-bar" target="_blank" rel="noopener">vue2-loading-bar</a> - 最简单的仿Youtube加载条视图</li><li><a href="https://github.com/weifeiyue/vue-datepicker" target="_blank" rel="noopener">vue-datepicker</a> - 漂亮的Vue日期选择器组件</li><li><a href="https://github.com/hilongjw/vue-video" target="_blank" rel="noopener">vue-video</a> - Vue.js的HTML5视频播放器</li><li><a href="https://github.com/ElemeFE/vue-toast-mobile" target="_blank" rel="noopener">vue-toast-mobile</a> - VueJS的toast插件</li><li><a href="https://github.com/dai-siki/vue-image-crop-upload" target="_blank" rel="noopener">vue-image-crop-upload</a> - vue图片剪裁上传组件</li><li><a href="https://github.com/Akryum/vue-tooltip" target="_blank" rel="noopener">vue-tooltip</a> - 带绑定信息提示的提示工具</li><li><a href="https://github.com/weizhenye/vue-highcharts" target="_blank" rel="noopener">vue-highcharts</a> - HighCharts组件</li><li><a href="https://github.com/surmon-china/vue-touch-ripple" target="_blank" rel="noopener">vue-touch-ripple</a> - vuejs的触摸ripple组件</li><li><a href="https://github.com/Kocisov/coffeebreak" target="_blank" rel="noopener">coffeebreak</a> - 实时编辑CSS组件工具</li><li><a href="https://github.com/coderdiaz/vue-datasource" target="_blank" rel="noopener">vue-datasource</a> - 创建VueJS动态表格</li><li><a href="https://github.com/phoenixwong/vue2-timepicker" target="_blank" rel="noopener">vue2-timepicker</a> - 下拉时间选择器</li><li><a href="https://github.com/Bubblings/vue-date-picker" target="_blank" rel="noopener">vue-date-picker</a> - VueJS日期选择器组件</li><li><a href="https://github.com/BosNaufal/vue-scrollbar" target="_blank" rel="noopener">vue-scrollbar</a> - 最简单的滚动区域组件</li><li><a href="https://github.com/CroudTech/vue-quill" target="_blank" rel="noopener">vue-quill</a> - vue组件构建quill编辑器</li><li><a href="https://github.com/phanan/vue-google-signin-button" target="_blank" rel="noopener">vue-google-signin-button</a> - 导入谷歌登录按钮</li><li><a href="https://github.com/MMF-FE/vue-svgicon" target="_blank" rel="noopener">vue-svgicon</a> - 创建svg图标组件的工具</li><li><a href="https://github.com/bkzl/vue-float-label" target="_blank" rel="noopener">vue-float-label</a> - VueJS浮动标签模式</li><li><a href="https://github.com/Dafrok/vue-baidu-map" target="_blank" rel="noopener">vue-baidu-map</a> - 基于 Vue 2的百度地图组件库</li><li><a href="https://github.com/nicolasbeauvais/vue-social-sharing" target="_blank" rel="noopener">vue-social-sharing</a> - 社交分享组件</li><li><a href="https://github.com/davidroyer/vue2-editor" target="_blank" rel="noopener">vue2-editor</a> - HTML编辑器</li><li><a href="https://github.com/Ginhing/vue-tagsinput" target="_blank" rel="noopener">vue-tagsinput</a> - 基于VueJS的标签组件</li><li><a href="https://github.com/shhdgit/vue-easy-slider" target="_blank" rel="noopener">vue-easy-slider</a> - Vue 2.x的滑块组件</li><li><a href="https://github.com/vue-bulma/datepicker" target="_blank" rel="noopener">datepicker</a> - 基于flatpickr的时间选择组件</li><li><a href="https://github.com/miaolz123/vue-chart" target="_blank" rel="noopener">vue-chart</a> - 强大的高速的vue图表解析</li><li><a href="https://github.com/yunyi1895/vue-music-master" target="_blank" rel="noopener">vue-music-master</a> - vue手机端网页音乐播放器</li><li><a href="https://github.com/vue-bulma/handsontable" target="_blank" rel="noopener">handsontable</a> - 网页表格组件</li><li><a href="https://github.com/F-loat/vue-simplemde" target="_blank" rel="noopener">vue-simplemde</a> - VueJS的Markdown编辑器组件</li><li><a href="https://github.com/myronliu347/vue-popup-mixin" target="_blank" rel="noopener">vue-popup-mixin</a> - 用于管理弹出框的遮盖层</li><li><a href="https://github.com/fangyongbao/cubeex" target="_blank" rel="noopener">cubeex</a> - 包含一套完整的移动UI</li><li><a href="https://github.com/CroudSupport/vue-fullcalendar" target="_blank" rel="noopener">vue-fullcalendar</a> - vue FullCalendar封装</li><li><a href="https://github.com/loujiayu/vue-material-design" target="_blank" rel="noopener">vue-material-design</a> - Vue MD风格组件</li><li><a href="https://github.com/bbonnin/vue-morris" target="_blank" rel="noopener">vue-morris</a> - Vuejs组件封装Morrisjs库</li><li><a href="https://github.com/tianyong90/we-vue" target="_blank" rel="noopener">we-vue</a> - Vue2及weui1开发的组件</li><li><a href="https://github.com/legeneek/vue-image-clip" target="_blank" rel="noopener">vue-image-clip</a> - 基于vue的图像剪辑组件</li><li><a href="https://github.com/jbaysolutions/vue-bootstrap-table" target="_blank" rel="noopener">vue-bootstrap-table</a> - 可排序可检索的表格</li><li><a href="https://github.com/wyzant-dev/vue-radial-progress" target="_blank" rel="noopener">vue-radial-progress</a> - Vue.js放射性进度条组件</li><li><a href="https://github.com/staskjs/vue-slick" target="_blank" rel="noopener">vue-slick</a> - 实现流畅轮播框的vue组件</li><li><a href="https://github.com/bajian/vue-pull-to-refresh" target="_blank" rel="noopener">vue-pull-to-refresh</a> - Vue2的上拉下拉</li><li><a href="https://github.com/matfish2/vue-form-2" target="_blank" rel="noopener">vue-form-2</a> - 全面的HTML表单管理的解决方案</li><li><a href="https://github.com/vue-comps/vue-side-nav" target="_blank" rel="noopener">vue-side-nav</a> - 响应式的侧边导航</li><li><a href="https://github.com/mint-ui/mint-indicator" target="_blank" rel="noopener">mint-indicator</a> - VueJS移动加载指示器插件</li><li><a href="https://github.com/vue-bulma/chartjs" target="_blank" rel="noopener">chartjs</a> - Vue Bulma的chartjs组件</li><li><a href="https://github.com/suguangwen/vue-scroll" target="_blank" rel="noopener">vue-scroll</a> - vue滚动</li><li><a href="https://github.com/BosNaufal/vue-ripple" target="_blank" rel="noopener">vue-ripple</a> - 制作谷歌MD风格涟漪效果的Vue组件</li><li><a href="https://github.com/icebob/vue-touch-keyboard" target="_blank" rel="noopener">vue-touch-keyboard</a> - VueJS虚拟键盘组件</li><li><a href="https://github.com/ankane/vue-chartkick" target="_blank" rel="noopener">vue-chartkick</a> - VueJS一行代码实现优美图表</li><li><a href="https://github.com/lisiyizu/vue-ztree" target="_blank" rel="noopener">vue-ztree </a>- 用 vue 写的树层级组件</li><li><a href="https://github.com/shiye515/vue-m-carousel" target="_blank" rel="noopener">vue-m-carousel</a> - vue 移动端轮播组件</li><li><a href="https://github.com/dai-siki/vue-datepicker-simple" target="_blank" rel="noopener">vue-datepicker-simple</a> - 基于vue的日期选择器</li><li><a href="https://github.com/alexqdjay/vue-tabs" target="_blank" rel="noopener">vue-tabs</a> - 多tab页轻型框架</li><li><a href="https://github.com/aweiu/vue-verify-pop" target="_blank" rel="noopener">vue-verify-pop</a> - 带气泡提示的vue校验插件</li><li><a href="https://github.com/vue-comps/vue-parallax" target="_blank" rel="noopener">vue-parallax</a> - 整洁的视觉效果</li><li><a href="https://github.com/JackGit/vue-img-loader" target="_blank" rel="noopener">vue-img-loader</a> - 图片加载UI组件</li><li><a href="https://github.com/eduardostuart/vue-typewriter" target="_blank" rel="noopener">vue-typewriter</a> - vue组件类型</li><li><a href="https://github.com/Teddy-Zhu/vue-smoothscroll" target="_blank" rel="noopener">vue-smoothscroll</a> - smoothscroll的VueJS版本</li><li><a href="https://github.com/xinxingyu/vue-city" target="_blank" rel="noopener">vue-city</a> - 城市选择器</li><li><a href="https://github.com/weibangtuo/vue-tree" target="_blank" rel="noopener">vue-tree</a> - vue树视图组件</li><li><a href="https://github.com/Treri/vue-ios-alertview" target="_blank" rel="noopener">vue-ios-alertview</a> - iOS7+ 风格的alertview服务</li><li><a href="https://github.com/ibufu/dd-vue-component" target="_blank" rel="noopener">dd-vue-component</a> - 订单来了的公共组件库</li><li><a href="https://github.com/yeseason/paco-ui-vue" target="_blank" rel="noopener">paco-ui-vue</a> - PACOUI的vue组件</li><li><a href="https://github.com/doodlewind/vue-cmap" target="_blank" rel="noopener">vue-cmap</a> - Vue China map可视化组件</li><li><a href="https://github.com/steven5538/vue-button" target="_blank" rel="noopener">vue-button</a> - Vue按钮组件</li></ul><h6 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h6><ul><li><a href="">vue.js</a> - 流行的轻量高效的前端组件化方案</li><li><a href="">vue-admin</a> - Vue管理面板框架</li><li><a href="">electron-vue</a> - Electron及VueJS快速启动样板</li><li><a href="">vue-2.0-boilerplate</a> - Vue2单页应用样板​</li><li><a href="">vue-spa-template</a> - 前后端分离后的单页应用开发</li><li><a href="">Framework7-Vue</a> - VueJS与Framework7结合</li><li><a href="">vue-bulma</a> - 轻量级高性能MVVM Admin UI框架</li><li><a href="">vue-webgulp</a> - 仿VueJS Vue loader示例</li><li><a href="">vue-element-starter</a> - vue启动页</li></ul><h6 id="实用库"><a href="#实用库" class="headerlink" title="实用库"></a>实用库</h6><ul><li><a href="">vuex</a> - 专为 Vue.js 应用程序开发的状态管理模式</li><li><a href="">vuelidate</a> - 简单轻量级的基于模块的Vue.js验证</li><li><a href="">qingcheng</a> - qingcheng主题</li><li><a href="">vue-desktop</a> - 创建管理面板网站的UI库</li><li><a href="">vue-meta</a> - 管理app的meta信息</li><li><a href="">vue-axios</a>- 将axios整合到VueJS的封装</li><li><a href="">vue-svg-icon</a> - vue2的可变彩色svg图标方案</li><li><a href="">avoriaz</a> - VueJS测试实用工具库</li><li><a href="">vue-framework7</a> - 结合VueJS使用的Framework7组件</li><li><a href="">vue-bootstrap-modal</a> - vue的Bootstrap样式组件</li><li><a href="">vuep</a> - 用实时编辑和预览来渲染Vue组件</li><li><a href="">vue-online</a> - reactive的在线和离线组件</li><li><a href="">vue-lazy-render</a> - 用于Vue组件的延迟渲染</li><li><a href="">vue-password-strength-meter</a> - 交互式密码</li><li><a href="">element-admin</a> - 支持 vuecli 的 Element UI 的后台模板</li><li><a href="">vue-electron</a> - 将选择的API封装到Vue对象中的插件</li><li><a href="">cleave</a> - 基于cleave.js的Cleave组件</li><li><a href="">vue-events</a> - 简化事件的VueJS插件</li><li><a href="">vue-shortkey</a> - 应用于Vue.js的Vue-ShortKey 插件</li><li><a href="">vue-cordova</a> - Cordova的VueJS插件</li><li><a href="">vue-router-transition</a> - 页面过渡插件</li><li><a href="">vue-gesture</a> - VueJS的手势事件插件</li><li><a href="">http-vue-loader</a> - 从html及js环境加载vue文件</li><li><a href="">vue-qart</a> - 用于qartjs的Vue2指令</li><li><a href="">vuemit</a> - 处理VueJS事件</li><li><a href="">vue-websocket</a> - VueJS的Websocket插件</li><li><a href="">vue-local-storage</a> - 具有类型支持的Vuejs本地储存插件</li><li><a href="">lazy-vue</a> - 懒加载图片</li><li><a href="">vue-bus</a> - VueJS的事件总线</li><li><a href="">vue-reactive-storage</a> - vue插件的Reactive层</li><li><a href="">vue-notifications</a> - 非阻塞通知库</li><li><a href="">vue-lazy-component</a> - 懒加载组件或者元素的Vue指令</li><li><a href="">v-media-query</a> - vue中添加用于配合媒体查询的方法</li><li><a href="">vue-observe-visibility</a> - 当元素在页面上可见或隐藏时检测</li><li><a href="">vue-ts-loader</a> - 在Vue装载机检查脚本</li><li><a href="">vue-pagination-2</a> - 简单通用的分页组件</li><li><a href="">vuex-i18n</a> - 定位插件</li><li><a href="">Vue.resize</a> - 检测HTML调整大小事件的vue指令</li><li><a href="">vuex-shared-mutations</a> - 分享某种Vuex mutations</li><li><a href="">vue-file-base64</a> - 将文件转换为Base64的vue组件</li><li><a href="">modal</a> - Vue Bulma的modal组件</li><li><a href="">Famous-Vue</a> - Famous库的vue组件</li><li><a href="">leo-vue-validator</a> - 异步的表单验证组件</li><li><a href="">Vue-Easy-Validator</a> - 简单的表单验证</li><li><a href="">vue-truncate-filter</a> - 截断字符串的VueJS过滤器</li><li><a href="">vue-zoombox</a> - 一个高级zoombox</li><li><a href="">vue-input-autosize</a> - 基于内容自动调整文本输入的大小</li><li><a href="">vue-lazyloadImg</a> - 图片懒加载</li></ul><h6 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h6><ul><li><a href="">nuxt.js</a> - 用于服务器渲染Vue app的最小化框架</li><li><a href="">express-vue</a> - 简单的使用服务器端渲染vue.js</li><li><a href="">vue-ssr</a> - 非常简单的VueJS服务器端渲染模板</li><li><a href="">vue-ssr</a> - 结合Express使用Vue2服务端渲染</li><li><a href="">vue-easy-renderer</a> - Nodejs服务端渲染</li></ul><h6 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h6><ul><li><a href="">DejaVue</a> - Vuejs可视化及压力测试</li><li><a href="">vue-play</a> - 展示Vue组件的最小化框架</li><li><a href="">vscode-VueHelper</a> - 目前vscode最好的vue代码提示插件</li><li><a href="">vue-generate-component</a> - 轻松生成Vue js组件的CLI工具</li><li><a href="">vue-multipage-cli</a> - 简单的多页CLI</li><li><a href="">VuejsStarterKit</a> - vuejs starter套件</li></ul><h6 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h6><ul><li><a href="">koel</a> - 基于网络的个人音频流媒体服务</li><li><a href="">pagekit</a> - 轻量级的CMS建站系统</li><li><a href="">vuedo</a> - 博客平台</li><li><a href="">jackblog-vue</a> - 个人博客系统</li><li><a href="">vue-cnode</a> - 重写vue版cnode社区</li><li><a href="">CMS-of-Blog</a> - 博客内容管理器</li><li><a href="">rss-reader</a> - 简单的rss阅读器</li><li><a href="">vue-ghpages-blog</a> - 依赖GitHub Pages无需本地生成的静态博客</li><li><a href="">swoole-vue-webim</a> - Web版的聊天应用</li><li><a href="">vue-dashing-js</a> - nuvo-dashing-js的fork</li><li><a href="">fewords</a> - 功能极其简单的笔记本</li><li><a href="">vue-blog</a> - 使用Vue2.0 和Vuex的vue-blog</li></ul><h6 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h6><ul><li><a href="">koel</a> - 基于网络的个人音频流媒体服务</li><li><a href="">pagekit</a> - 轻量级的CMS建站系统</li><li><a href="">vuedo</a> - 博客平台</li><li><a href="">jackblog-vue</a> - 个人博客系统</li><li><a href="">vue-cnode</a> - 重写vue版cnode社区</li><li><a href="">CMS-of-Blog</a> - 博客内容管理器</li><li><a href="">rss-reader</a> - 简单的rss阅读器</li><li><a href="">vue-ghpages-blog</a> - 依赖GitHub Pages无需本地生成的静态博客</li><li><a href="">swoole-vue-webim</a> - Web版的聊天应用</li><li><a href="">vue-dashing-js</a> - nuvo-dashing-js的fork</li><li><a href="">fewords</a> - 功能极其简单的笔记本</li><li><a href="">vue-blog</a> - 使用Vue2.0 和Vuex的vue-blog</li></ul><h6 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h6><ul><li><a href="">Vue-cnodejs</a> - 基于vue重写Cnodejs.org的webapp</li><li><a href="">NeteaseCloudWebApp</a> - 高仿网易云音乐的webapp</li><li><a href="">vue-zhihu-daily</a> - 知乎日报 with Vuejs</li><li><a href="">vue-wechat</a> - vue.js开发微信app界面</li><li><a href="">vue2-demo</a> - 从零构建vue2 + vue-router + vuex 开发环境</li><li><a href="">eleme</a> - 高仿饿了么app商家详情</li><li><a href="">vue-demo</a> - vue简易留言板</li><li><a href="">maizuo</a> - vue/vuex/redux仿卖座网</li><li><a href="">spa-starter-kit</a> - 单页应用启动套件</li><li><a href="">vue-music</a> - Vue 音乐搜索播放</li><li><a href="">douban</a> - 模仿豆瓣前端</li><li><a href="">vue-Meizi</a> - vue最新实战项目</li><li><a href="">zhihudaily-vue</a> - 知乎日报web版</li><li><a href="">vue-demo-kugou</a> - vuejs仿写酷狗音乐webapp</li><li><a href="">VueDemo_Sell_Eleme</a> - Vue2高仿饿了么外卖平台</li><li><a href="">vue2.0-taopiaopiao</a> - vue2.0与express构建淘票票页面</li><li><a href="">vue-leancloud-blog</a> - 一个前后端完全分离的单页应用</li><li><a href="">node-vue-server-webpack</a> - Node.js+Vue.js+webpack快速开发框架</li><li><a href="">mi-by-vue</a> - VueJS仿小米官网</li><li><a href="">vue-fis3</a> - 流行开源工具集成demo</li><li><a href="">vue2.x-douban</a> - Vue2实现简易豆瓣电影webApp</li><li><a href="">vue-demo-maizuo</a>- 使用Vue2全家桶仿制卖座电影</li><li><a href="">vue-zhihudaily</a> - 知乎日报 Web 版本</li><li><a href="">vue-adminLte-vue-router</a> - vue和adminLte整合应用</li><li><a href="">vue-axios-github</a> - 登录拦截登出功能</li><li><a href="">Zhihu-Daily-Vue.js</a> - Vuejs单页网页应用</li><li><a href="">hello-vue-django</a> - 使用带有Django的vuejs的样板项目</li><li><a href="">vue-cnode</a> - vue单页应用demo</li><li><a href="">x-blog</a> - 开源的个人blog项目</li><li><a href="">vue-express-mongodb</a> - 简单的前后端分离案例</li><li><a href="">websocket_chat</a> - 基于vue和websocket的多人在线聊天室</li><li><a href="">photoShare</a> - 基于图片分享的社交平台</li><li><a href="">vue-zhihudaily-2.0</a> - 使用Vue2.0+vue-router+vuex创建的zhihudaily</li><li><a href="">notepad</a> - 本地存储的记事本</li><li><a href="">vueBlog</a> - 前后端分离博客</li><li><a href="">vue-ruby-china</a>- VueJS框架搭建的rubychina平台</li><li><a href="">Zhihu_Daily</a> - 基于Vue和Nodejs的Web单页应用</li><li><a href="">vue-koa-demo</a> - 使用Vue2和Koa1的全栈demo</li><li><a href="">vue2.x-Cnode</a> - 基于vue全家桶的Cnode社区</li><li><a href="">life-app-vue</a> - 使用vue2完成多功能集合到小webapp</li><li><a href="">github-explorer</a> - 寻找最有趣的GitHub库</li><li><a href="">vue-trip</a> - vue2做的出行webapp</li><li><a href="">vue-ssr-boilerplate</a> - 精简版的ofvue-hackernews-2</li><li><a href="">vue-bushishiren</a> - 不是诗人应用</li><li><a href="">houtai</a> - 基于vue和Element的后台管理系统</li><li><a href="">ios7-vue</a> - 使用vue2.0 vue-router vuex模拟ios7</li><li><a href="">Framework7-VueJS</a> - 使用移动框架的示例</li><li><a href="">cnode-vue</a> - 基于vue和vue-router构建的cnodejs web网站SPA</li><li><a href="">vue-cli-multipage-bootstrap</a> - 将vue官方在线示例整合到组件中</li><li><a href="">vue-cnode</a> - 用 Vue 做的 CNode 官网</li><li><a href="">HyaReader</a> - 移动友好的阅读器</li><li><a href="">zhihu-daily</a> - 轻松查看知乎日报内容</li><li><a href="">seeMusic</a> - 跨平台云音乐播放器</li><li><a href="">vue-cnode</a> - 使用cNode社区提供的接口</li><li><a href="">zhihu-daily-vue</a> - 知乎日报</li><li><a href="">sls-vuex2-demo</a> - vuex2商城购物车demo</li><li><a href="">vue-dropload</a> - 用以测试下拉加载与简单路由</li><li><a href="">vue-cnode-mobile</a> - 搭建cnode社区</li><li><a href="">Vuejs-SalePlatform</a> - vuejs搭建的售卖平台demo</li><li><a href="">v-notes</a> - 简单美观的记事本</li><li><a href="">vue-starter</a> - VueJs项目的简单启动页</li><li><a href="">vue-memo</a> - 用 vue写的记事本应用</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;UI组件&quot;&gt;&lt;a href=&quot;#UI组件&quot; class=&quot;headerlink&quot; title=&quot;UI组件&quot;&gt;&lt;/a&gt;UI组件&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElemeFE/element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;element&lt;/a&gt; - 饿了么出品的Vue2的web UI工具套件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airyland/vux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vux&lt;/a&gt; - 基于Vue和WeUI的组件库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ElemeFE/mint-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mint-ui&lt;/a&gt; - Vue 2的移动UI元素&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iviewui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iview&lt;/a&gt; - 基于 Vuejs 的开源 UI 组件库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JosephusPaye/Keen-UI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keen-UI&lt;/a&gt; - 轻量级的基本UI组件合集&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuematerial/vue-material&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-material&lt;/a&gt; - 通过Vue Material和Vue 2建立精美的app应用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/museui/muse-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;muse-ui&lt;/a&gt; - 三端样式一致的响应式 UI 库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue2.0" scheme="//tuspring.com/tags/vue2-0/"/>
    
      <category term="插件" scheme="//tuspring.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="vueUI组件" scheme="//tuspring.com/tags/vueUI%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vuex 简单入门</title>
    <link href="//tuspring.com/2017/11/28/vuex/"/>
    <id>//tuspring.com/2017/11/28/vuex/</id>
    <published>2017-11-28T11:20:00.000Z</published>
    <updated>2018-04-07T07:58:10.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h2><blockquote><p>在Vue中，多组件的开发给我们带来了很多的方便，但同时当项目规模变大的时候，多个组件间的数据通信和状态管理就显得难以维护。而Vuex就此应运而生。将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。<code>Vuex</code>采用和<code>Redux</code>类似的单向数据流的方式来管理数据。用户界面负责触发动作（Action)进而改变对应状态（State），从而反映到视图（View）上。如下图所示：</p></blockquote><a id="more"></a><p><img src="/assets/blogImg/vuex1.png" alt=""></p><h1 id="使用Vuex"><a href="#使用Vuex" class="headerlink" title="使用Vuex"></a>使用Vuex</h1><p>安装:</p><blockquote><p>npm install –save vuex</p></blockquote><p>引入：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p><h1 id="Vuex的组成部分"><a href="#Vuex的组成部分" class="headerlink" title="Vuex的组成部分"></a>Vuex的组成部分</h1><p>完整的应用Vuex开发的应用结构应该是这样的：<br><img src="/assets/blogImg/vuex2.png" alt=""><br>下面针对比较核心的部分进行说明。</p><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>State负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用<code>this.$store.state</code>直接获取状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store为实例化生成的</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这个store可以理解为一个容器，包含着应用中的state等。实例化生成store的过程是：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = <span class="meta">&#123;...&#125;</span>;</span><br><span class="line"><span class="keyword">const</span> actions = <span class="meta">&#123;...&#125;</span>;</span><br><span class="line"><span class="keyword">const</span> state = <span class="meta">&#123;...&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Vuex</span>.<span class="type">Store</span>(&#123;</span><br><span class="line">  state,</span><br><span class="line">  actions,</span><br><span class="line">  mutation</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用<code>this.$store.state</code>获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//我是组件</span><br><span class="line">import &#123;mapState&#125; <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    count: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样直接就可以在组件中直接使用了。</p><h1 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h1><p>Mutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。<code>store.commit(mutationName)</code>是用来触发一个<code>mutation</code>的方法。需要记住的是，定义的mutation必须是同步函数，否则<code>devtool</code>中的数据将可能出现问题，使状态改变变得难以跟踪。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mutations = &#123;</span><br><span class="line">  mutationName(<span class="keyword">state</span>) &#123;</span><br><span class="line">    //在这里改变<span class="keyword">state</span>中的数据</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在组件中触发：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//我是一个组件</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$store.commit(<span class="string">'mutationName'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用辅助函数<code>mapMutations</code>直接将触发函数映射到<code>methods</code>上，这样就能在元素事件绑定上直接使用了。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我是一个组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: mapMutations([</span><br><span class="line">    <span class="string">'mutationName'</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>Actions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是<code>mapActions</code>与<code>mapMutations</code>类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用<code>this.$store.dispatch(actionName)</code>方法。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义Actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  actionName(&#123; commit &#125;) &#123;</span><br><span class="line">    <span class="comment">//dosomething</span></span><br><span class="line">    commit(<span class="string">'mutationName'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在组件中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我是一个组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: mapActions([</span><br><span class="line">    <span class="string">'actionName'</span>,</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><p>有些状态需要做二次处理，就可以使用<code>getters</code>。通过 <code>this.$store.getters.valueName</code> 对派生出来的状态进行访问。或者直接使用辅助函数<code>mapGetters</code>将其映射到本地计算属性中去。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const getters = &#123;</span><br><span class="line">  strLength: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.aString.length</span><br><span class="line">&#125;</span><br><span class="line">//上面的代码根据aString状态派生出了一个strLength状态</span><br></pre></td></tr></table></figure></p><p>在组件中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我是一个组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: mapGetters([</span><br><span class="line">    <span class="string">'strLength'</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>插件就是一个钩子函数，在初始化store的时候引入即可。比较常用的是内置的logger插件，用于作为调试使用。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line">const store = Vuex.Store(&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [createLogger()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后，还有一些高级用法，如严格模式，测试等可能使用频率不会特别高。有需要的时候查官方文档就可以了。总的来说，Vuex还是相对比较简单的，特别是如果之前有学过Flux,Redux之类的话，上手起来更加容易。</p><p>参考文档:  <a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="noopener">http://vuex.vuejs.org/zh-cn/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Vuex&quot;&gt;&lt;a href=&quot;#什么是Vuex&quot; class=&quot;headerlink&quot; title=&quot;什么是Vuex&quot;&gt;&lt;/a&gt;什么是Vuex&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在Vue中，多组件的开发给我们带来了很多的方便，但同时当项目规模变大的时候，多个组件间的数据通信和状态管理就显得难以维护。而Vuex就此应运而生。将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。&lt;code&gt;Vuex&lt;/code&gt;采用和&lt;code&gt;Redux&lt;/code&gt;类似的单向数据流的方式来管理数据。用户界面负责触发动作（Action)进而改变对应状态（State），从而反映到视图（View）上。如下图所示：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="//tuspring.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vuex" scheme="//tuspring.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>如果有时光机的话，你想去未来还是回到过去？</title>
    <link href="//tuspring.com/2017/05/06/future_past/"/>
    <id>//tuspring.com/2017/05/06/future_past/</id>
    <published>2017-05-06T14:18:00.000Z</published>
    <updated>2018-04-22T16:43:15.930Z</updated>
    
    <content type="html"><![CDATA[<p>如果有时光机，让你回到过去，但时间倒流几年。你就要损失未来相应年数的寿命，你愿意回到什么时候？</p><p><img src="/assets/blogImg/tuspring.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有时光机，让你回到过去，但时间倒流几年。你就要损失未来相应年数的寿命，你愿意回到什么时候？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blogImg/tuspring.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="过去" scheme="//tuspring.com/tags/%E8%BF%87%E5%8E%BB/"/>
    
      <category term="未来" scheme="//tuspring.com/tags/%E6%9C%AA%E6%9D%A5/"/>
    
      <category term="时光机" scheme="//tuspring.com/tags/%E6%97%B6%E5%85%89%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages绑定域名</title>
    <link href="//tuspring.com/2017/01/22/a-github-pages/"/>
    <id>//tuspring.com/2017/01/22/a-github-pages/</id>
    <published>2017-01-22T10:40:00.000Z</published>
    <updated>2018-04-27T15:13:44.870Z</updated>
    
    <content type="html"><![CDATA[<p>如果你用hexo-github搭了博客，又不想使用GitHub的xxx.github.io,  可以看下面怎么去绑定自己的域名。<br>（没有域名？<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.550.a723381fLPFyjm" target="_blank" rel="noopener">点传送门</a>)</p><h6 id="1-向你的-Github-Pages-仓库添加一个CNAME-一定要大写-文件"><a href="#1-向你的-Github-Pages-仓库添加一个CNAME-一定要大写-文件" class="headerlink" title="1. 向你的 Github Pages 仓库添加一个CNAME(一定要大写)文件"></a>1. 向你的 Github Pages 仓库添加一个CNAME(一定要大写)文件</h6><p>其中只能包含一个顶级域名，像这样：<br>example.com  —-&gt;注意前面没有http://，也没有www，</p><p>还有你用 hexo 框架搭建博客并部署到 Github Pages 上，每次</p><blockquote><p>hexo g<br>hexo d</p></blockquote><a id="more"></a><p>后会把你的博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接把 CNAME 文件添加到 source 文件夹里，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</p><h6 id="2-向你的-DNS-配置中添加-3-条记录"><a href="#2-向你的-DNS-配置中添加-3-条记录" class="headerlink" title="2. 向你的 DNS 配置中添加 3 条记录"></a>2. 向你的 DNS 配置中添加 3 条记录</h6><p>@          A             192.30.252.153<br>@          A             192.30.252.154<br>www      CNAME           username.github.io.</p><p>用你自己的 Github 用户名替换 username<br>（其实www的方式，会先解析成<a href="http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。" target="_blank" rel="noopener">http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）。</a><br>配置 DNS 推荐使用 DNSPOD 的服务，使用国外的 DNS 解析服务可能有被墙的风险。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你用hexo-github搭了博客，又不想使用GitHub的xxx.github.io,  可以看下面怎么去绑定自己的域名。&lt;br&gt;（没有域名？&lt;a href=&quot;https://wanwang.aliyun.com/?spm=5176.8142029.388261.550.a723381fLPFyjm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点传送门&lt;/a&gt;)&lt;/p&gt;
&lt;h6 id=&quot;1-向你的-Github-Pages-仓库添加一个CNAME-一定要大写-文件&quot;&gt;&lt;a href=&quot;#1-向你的-Github-Pages-仓库添加一个CNAME-一定要大写-文件&quot; class=&quot;headerlink&quot; title=&quot;1. 向你的 Github Pages 仓库添加一个CNAME(一定要大写)文件&quot;&gt;&lt;/a&gt;1. 向你的 Github Pages 仓库添加一个CNAME(一定要大写)文件&lt;/h6&gt;&lt;p&gt;其中只能包含一个顶级域名，像这样：&lt;br&gt;example.com  —-&amp;gt;注意前面没有http://，也没有www，&lt;/p&gt;
&lt;p&gt;还有你用 hexo 框架搭建博客并部署到 Github Pages 上，每次&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo g&lt;br&gt;hexo d&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="//tuspring.com/tags/hexo/"/>
    
      <category term="域名" scheme="//tuspring.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客hexo+github详细完整步骤</title>
    <link href="//tuspring.com/2017/01/20/a-tuspring-blog/"/>
    <id>//tuspring.com/2017/01/20/a-tuspring-blog/</id>
    <published>2017-01-20T06:48:00.000Z</published>
    <updated>2018-04-27T15:24:54.019Z</updated>
    
    <content type="html"><![CDATA[<p>参考了别人的一些方法，在总结了自己的安装部署过程。把完整步骤分享给大家，如果我的步骤不行，大家可以参考其他人的（有用过Git、node、GitHub的应该可以很快搞定，没用过的可能要花费点时间！）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">现在开始搭建属于你的博客.</span><br></pre></td></tr></table></figure><h2 id="一、第一步：下载安装Git"><a href="#一、第一步：下载安装Git" class="headerlink" title="一、第一步：下载安装Git"></a>一、第一步：下载安装Git</h2><blockquote><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git下载地址</a></p></blockquote><a id="more"></a><h3 id="Git安装步骤"><a href="#Git安装步骤" class="headerlink" title="Git安装步骤"></a>Git安装步骤</h3><p><img src="/assets/img/a-github-pages/pic1.png" alt=""></p><p><img src="/assets/img/a-github-pages/pic2.png" alt=""></p><blockquote><p>然后一路默认</p></blockquote><h2 id="二、第二步：下载安装node-js"><a href="#二、第二步：下载安装node-js" class="headerlink" title="二、第二步：下载安装node.js"></a>二、第二步：下载安装node.js</h2><h3 id="1、node-js下载地址"><a href="#1、node-js下载地址" class="headerlink" title="1、node.js下载地址"></a>1、<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js下载地址</a></h3><p><img src="/assets/img/a-github-pages/pic3.jpg" alt=""></p><blockquote><p>2、安装步骤：一路默认就行（安装路径根据自己需要更改）</p></blockquote><h2 id="三、第三步：安装hexo"><a href="#三、第三步：安装hexo" class="headerlink" title="三、第三步：安装hexo"></a>三、第三步：安装hexo</h2><blockquote><p>1、利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash</p></blockquote><p><img src="/assets/img/a-github-pages/pic4.png" alt=""></p><blockquote><p>2、输入命令：npm install -g hexo</p></blockquote><p><img src="/assets/img/a-github-pages/pic5.png" alt=""></p><blockquote><p>注意：-g是指全局安装hexo。</p></blockquote><h2 id="四、第四步：初始化Hexo"><a href="#四、第四步：初始化Hexo" class="headerlink" title="四、第四步：初始化Hexo"></a>四、第四步：初始化Hexo</h2><blockquote><p>1、创建文件夹（我的是在E盘创建的Hexo–根据个人爱好创建博客文件夹）<br><img src="/assets/img/a-github-pages/pic6.png" alt=""></p></blockquote><blockquote><p>2、在Hexo文件下，右键运行Git Bash，输入命令：hexo init<br>（这里可能时间会长些，要耐心等待）<br><img src="/assets/img/a-github-pages/pic7.png" alt=""></p></blockquote><blockquote><p>初始化成功后生成的一些列文件,如下<br><img src="/assets/img/a-github-pages/pic8.png" alt=""></p></blockquote><blockquote><p>3、在_config.yml,进行基础配置 (在你创建的博客文件夹（hexo）下的_config.yml文件)</p></blockquote><p><img src="/assets/img/a-github-pages/pic9.png" alt=""></p><blockquote><p>其中可以在这里<a href="https://hexo.io/themes/" target="_blank" rel="noopener">浏览更多主题</a>，然后在Hexo文件夹下 Git Bash(在hexo文件夹下鼠标右键就可以看到GitBash，点击打开)</p></blockquote><blockquote><p>输入命令：git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next（next为主题名字），来获得更多主题(我现在在用的主题<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>)</p></blockquote><p><img src="/assets/img/a-github-pages/pic10.png" alt=""></p><p><img src="/assets/img/a-github-pages/pic12.png" alt=""></p><blockquote><p>4、本地浏览博客<br> 分别输入 如下命令：<br>     hexo g<br>     hexo s</p></blockquote><blockquote><p> <a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">hexo常用命令</a></p></blockquote><p><img src="/assets/img/a-github-pages/pic11.png" alt=""></p><h5 id="在浏览器输入：localhost：4000-，就可以进行访问，效果如下："><a href="#在浏览器输入：localhost：4000-，就可以进行访问，效果如下：" class="headerlink" title="在浏览器输入：localhost：4000 ，就可以进行访问，效果如下："></a>在浏览器输入：localhost：4000 ，就可以进行访问，效果如下：</h5><p><img src="/assets/img/a-github-pages/pic13.png" alt=""></p><h4 id="5、写文章"><a href="#5、写文章" class="headerlink" title="5、写文章"></a>5、写文章</h4><blockquote><p>在E:\Hexo\source_posts文件下，新建.md文件就可以写文章<br><img src="/assets/img/a-github-pages/pic14.png" alt=""></p></blockquote><blockquote><hr><h2 id="title-我的博客"><a href="#title-我的博客" class="headerlink" title="title: 我的博客"></a>title: 我的博客</h2></blockquote><p><img src="/assets/img/a-github-pages/pic15.png" alt=""><br><img src="/assets/img/a-github-pages/pic16.png" alt=""></p><h2 id="五、部署到Github上"><a href="#五、部署到Github上" class="headerlink" title="五、部署到Github上"></a>五、部署到Github上</h2><blockquote><p>1、申请<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号，（注意别忘了进行账号邮箱验证）</p></blockquote><p><img src="/assets/img/a-github-pages/pic17.png" alt=""></p><blockquote><p>2.new repository</p></blockquote><p><img src="/assets/img/a-github-pages/pic18.jpg" alt=""></p><p><img src="/assets/img/a-github-pages/pic19.jpg" alt=""></p><blockquote><p>记得名字要一致。否则部署上GitHub的博客无法正常显示</p></blockquote><blockquote><p>然后点击<br><img src="/assets/img/a-github-pages/pic20.png" alt=""></p></blockquote><blockquote><p>3、在_config.yml进行配置 (注意要保存, 记得要有空格否则报错)<br><img src="/assets/img/a-github-pages/pic21.png" alt=""></p></blockquote><blockquote><p> 4、安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>自动部署发布工具</p></blockquote><blockquote><p>   npm install hexo-deployer-git  –save</p></blockquote><p><img src="/assets/img/a-github-pages/pic22.png" alt=""></p><blockquote><p>5、发布到Github<br>    输入如下命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p></blockquote><p><img src="/assets/img/a-github-pages/pic23.png" alt=""></p><blockquote><p>第一次发布需要验证github账号 (部署时可能还会提示你全局绑定github用户名和邮箱)<br><img src="/assets/img/a-github-pages/pic24.png" alt=""></p></blockquote><blockquote><p>发布成功后，我们在仓库中看到这个<br><img src="/assets/img/a-github-pages/pic25.png" alt=""></p></blockquote><blockquote><p>6、测试访问<br>在浏览器输入：<a href="https://tuspring.github.io/" target="_blank" rel="noopener">https://tuspring.github.io/</a> (你的<a href="https://xxxxx.github.io/" target="_blank" rel="noopener">https://xxxxx.github.io/</a>)</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后，搭建完毕！ 噢耶</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考了别人的一些方法，在总结了自己的安装部署过程。把完整步骤分享给大家，如果我的步骤不行，大家可以参考其他人的（有用过Git、node、GitHub的应该可以很快搞定，没用过的可能要花费点时间！）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;现在开始搭建属于你的博客.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;一、第一步：下载安装Git&quot;&gt;&lt;a href=&quot;#一、第一步：下载安装Git&quot; class=&quot;headerlink&quot; title=&quot;一、第一步：下载安装Git&quot;&gt;&lt;/a&gt;一、第一步：下载安装Git&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://gitforwindows.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git下载地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="//tuspring.com/tags/hexo/"/>
    
      <category term="博客" scheme="//tuspring.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
